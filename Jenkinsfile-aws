pipeline {
    agent any

    triggers {
        pollSCM '* * * * *'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    if (isUnix()) {
                        error('This pipeline script is meant to run on Windows only.')
                    }
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} assemble"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    if (isUnix()) {
                        error('This pipeline script is meant to run on Windows only.')
                    }
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} test"
                }
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} docker"
                }
            }
        }
        stage('Push Docker image') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
                script {
                    def gradlewCmd = 'gradlew.bat'
                    bat "docker login --username=${env.DOCKER_HUB_LOGIN_USR} --password=${env.DOCKER_HUB_LOGIN_PSW}"
                    bat "${gradlewCmd} dockerPush -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR}"
                }
            }
        }
        stage('Deploy to AWS') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
                script {
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=%SUBNET_ID% -PdockerHubUsername=%DOCKER_HUB_LOGIN_USR% -Pregion=%AWS_REGION%"
                }
            }
        }
    }
}

// Utility method to check if the OS is Unix-like
def isUnix() {
    return !System.getProperty('os.name').toLowerCase().contains('windows')
}
