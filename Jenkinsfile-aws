pipeline {
    agent any



    triggers {
        pollSCM '* * * * *'
    }
     environment {
            JAVA_HOME = '/Users/klesiosilva/Library/Java/JavaVirtualMachines/corretto-11.0.20.1/Contents/Home'
             GIT_PATH = '/usr/local/bin/git'
        }

    stages {
        stage('Build') {
            steps {
                script {
                 def gradlewCmd = 'gradlew.bat'
                      if (isUnix()) {
                         gradlewCmd = './gradlew'
                      }
                        // Print JAVA_HOME for verification
                          echo "JAVA_HOME: ${env.JAVA_HOME}"


                      sh "${gradlewCmd} clean build"



                    // sh "${gradlewCmd} release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=1.0.0 -Prelease.newVersion=1.1.0-SNAPSHOT"
                    }
                }
            }

        stage('Test') {
            steps {
                script {
                   def gradlewCmd = 'gradlew.bat'
                       if (isUnix()) {
                         gradlewCmd = './gradlew'
                       }
                     sh "${gradlewCmd} test"

                }
            }
        }
stage('Build Docker image') {
   environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {

            if (isUnix()) {
                gradlewCmd = './gradlew'
            }

            // Run your existing Docker build command
            sh "./gradlew docker"
            sh 'docker login --username=${env.DOCKER_HUB_LOGIN_USR} --password=${env.DOCKER_HUB_LOGIN_PSW}'
            sh './gradlew dockerPush'
        }
    }
}

stage('Deploy to AWS') {
    environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {

                   if (isUnix()) {
                      gradlewCmd = './gradlew'
                     }


                withAWS(credentials: 'aws-credentials', region: 'eu-central-1') {

                    sh "${gradlewCmd} awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=${env.SUBNET_ID} -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR} -Pregion=${env.AWS_REGION}"


           }
        }
    }
}





 }
 }


// Utility method to check if the OS is Unix-like
def isUnix() {
    return !System.getProperty('os.name').toLowerCase().contains('windows')
}
