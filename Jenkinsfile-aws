pipeline {
    agent any

    triggers {
        pollSCM '* * * * *'
    }

    stages {

            stage('Prepare') {
                steps {
                    script {
                        // On Unix-like systems, make sure gradlew is executable
                        if ('windows' != System.getProperty('os.name').toLowerCase().substring(0, 7)) {
                            sh 'chmod +x ./gradlew || true'
                        }
                    }
                }
            }
        stage('Build') {
            steps {
            if ('windows' == System.getProperty('os.name').toLowerCase().substring(0, 7)) {
                bat 'gradlew assemble'
            } else {
                sh './gradlew assemble'
             }
            }
        }
        stage('Test') {
            steps {
             if ('windows' == System.getProperty('os.name').toLowerCase().substring(0, 7)) {
                bat 'gradlew test'
                } else{
                sh './gradlew test'
                }
            }
        }
        stage('Build Docker image') {
         steps {
                if ('windows' == System.getProperty('os.name').toLowerCase().substring(0, 7)) {
                         bat 'gradlew docker'
                         } else{
                         sh './gradlew docker'
                         }
                 }
        }
stage('Push Docker image') {
    environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {
            if ('windows' == System.getProperty('os.name').toLowerCase().substring(0, 7)) {
                bat "docker login --username=${env.DOCKER_HUB_LOGIN_USR} --password=${env.DOCKER_HUB_LOGIN_PSW}"
                bat "./gradlew dockerPush -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR}"
            } else {
                sh "docker login --username=${env.DOCKER_HUB_LOGIN_USR} --password=${env.DOCKER_HUB_LOGIN_PSW}"
                sh "./gradlew dockerPush -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR}"
            }
        }
    }
}

stage('Deploy to AWS') {
    environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {
            if ('windows' == System.getProperty('os.name').toLowerCase().substring(0, 7)) {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                    bat "./gradlew awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=${env.SUBNET_ID} -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR} -Pregion=${env.AWS_REGION}"
                }
            } else {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                    sh "./gradlew awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=${env.SUBNET_ID} -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR} -Pregion=${env.AWS_REGION}"
                }
            }
        }
    }
}

    }
}