pipeline {
    agent any

    triggers {
        pollSCM '* * * * *'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    if (isUnix()) {
                        error('This pipeline script is meant to run on Windows only.')
                    }
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} clean"
                    bat "${gradlewCmd} assemble"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    if (isUnix()) {
                        error('This pipeline script is meant to run on Windows only.')
                    }
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} test"
                }
            }
        }
stage('Build Docker image') {
    environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {
            def gradlewCmd = 'gradlew.bat'
            // Resolve build number and Git commit hash
            def buildNumber = env.BUILD_NUMBER
            def gitCommit = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            // Construct the image tag from the build number and Git commit
            def imageTag = "${buildNumber}-${gitCommit}"

            // Build the Docker image using Gradle, passing the image tag as a project property
            bat "${gradlewCmd} docker -PimageTag=${imageTag}"
        }
    }
}

stage('Push Docker image') {
    environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {
            // Log in to Docker Hub
            bat "docker login --username=${env.DOCKER_HUB_LOGIN_USR} --password=${env.DOCKER_HUB_LOGIN_PSW}"

            // Resolve build number and Git commit hash
            def buildNumber = env.BUILD_NUMBER
            def gitCommit = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            // Construct the image tag from the build number and Git commit
            def imageTag = "${buildNumber}-${gitCommit}"

            // Push the Docker image using Gradle, passing the image tag as a project property
            bat "gradlew.bat dockerPush -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR} -PimageTag=${imageTag}"
        }
    }
}

        stage('Deploy to AWS') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')

            }
            steps {

              withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                    bat "gradlew.bat awsCfnDeleteStack awsCfnWaitStackComplete"
                    bat "gradlew.bat awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=${env.SUBNET_ID} -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR} -Pregion=${env.AWS_REGION}"

                 }
                }

            }

    }
}

// Utility method to check if the OS is Unix-like
def isUnix() {
    return !System.getProperty('os.name').toLowerCase().contains('windows')
}
