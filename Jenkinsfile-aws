pipeline {
    agent any

    triggers {
        pollSCM '* * * * *'
    }

    stages {
stage('Build') {
    steps {
        script {
            if (isUnix()) {
                error('Este script de pipeline deve ser executado apenas no Windows.')
            }
            def gradlewCmd = 'gradlew.bat'

            bat "${gradlewCmd} clean"
            bat "${gradlewCmd} build --rerun-tasks"

            // Update PATH to include Git
            env.PATH = "C:\\Developer\\Tools\\git\\mingw64\\bin;" + env.PATH

        // Obt√©m o nome da branch local
        def branchName = bat(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()

        // Define a branch local para rastrear a branch remota 'origin/master'
        bat "git checkout master"

         bat "git restore . "
            // Executa o comando release
            bat "${gradlewCmd} release"
        }
    }
}

        stage('Test') {
            steps {
                script {
                    def gradlewCmd = 'gradlew.bat'
                    bat "${gradlewCmd} test"
                }
            }
        }
        stage('Build Docker image') {
         environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
                script {
                   def gradlewCmd = 'gradlew.bat'

                               // Build the project using Gradle
                               bat "${gradlewCmd} build --rerun-tasks"

                               // Build the Docker image
                               bat "${gradlewCmd} docker --rerun-tasks "

                               // Docker login to Docker Hub
                               bat "docker login --username=${env.DOCKER_HUB_LOGIN_USR} --password=${env.DOCKER_HUB_LOGIN_PSW}"

                               // Push the Docker image to Docker Hub
                               bat "${gradlewCmd} dockerPush -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR}"
                }
            }
        }
stage('Deploy to AWS') {
    environment {
        DOCKER_HUB_LOGIN = credentials('docker-hub')
    }
    steps {
        script {
            try {

                        // Call your Gradle build
                        bat "gradlew.bat build  writeDockerImageNameToFile" // Assuming you're using Windows batch command

                        // Read the imageName from the file
                        def dockerImageName = readFile("${WORKSPACE}/build/dockerImageName.txt").trim()

                        // Now dockerImageName contains your Docker image name, and you can use it in subsequent steps
                        echo "Docker Image Name: ${dockerImageName}"

                        // Example: Pulling the latest Docker image
                        bat "docker pull ${dockerImageName}"

                withAWS(credentials: 'aws-credentials', region: 'eu-central-1') {
                    bat "gradlew.bat awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=${env.SUBNET_ID} -PdockerHubUsername=${env.DOCKER_HUB_LOGIN_USR} -Pregion=${env.AWS_REGION}"
                }
            } catch (Exception e) {
                // Log the error
                echo "Deployment failed: ${e.getMessage()}"
            }
        }
    }
}

    }
}

// Utility method to check if the OS is Unix-like
def isUnix() {
    return !System.getProperty('os.name').toLowerCase().contains('windows')
}
