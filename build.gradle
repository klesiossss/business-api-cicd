

plugins {
    id 'java'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' // Update to the latest version
    id 'org.springframework.boot' version '2.5.5' // Use a valid Spring Boot plugin version
    id 'net.researchgate.release' version '3.0.2'
    id 'com.palantir.docker' version '0.34.0'
    id 'com.palantir.docker-run' version '0.34.0'
    id 'jp.classmethod.aws.reboot.cloudformation' version '0.45'
}



repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'com.h2database', name: 'h2', version: '2.1.214'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'klesio123'

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    snapshotSuffix = '-SNAPSHOT'
    buildTasks = ["build"]

    git {
        requireBranch.set('master')
    }
}


publishing {
    repositories {
        maven {
            url = "http://localhost:8081/repository/myRepo/"
            allowInsecureProtocol=true
            credentials{
                username= project.findProperty("nexusUsername") ?: "admin"
                password = project.findProperty("nexusPassword") ?: "Oiselk@123"
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = 'com.exemple'
            artifactId='your-artifact-id'
            version='1.0.0'
            from components.java
        }
    }
}

tasks {
    afterReleaseBuild {
        dependsOn publish
    }
}










String imageName = "${dockerHubUsernameProperty}/spring-boot-api-example:${project.version }"

task printVersion {
    doLast {

        println 'imagemName: '+ imageName
        println 'project.version: '+ project.version

    }
}

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

// Make sure the Docker task depends on any task that might affect the version
tasks.named('docker').configure {
    dependsOn 'printVersion'
    doFirst {
        println "Building and pushing Docker image with name: $imageName"
    }
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

aws {
    region = findProperty('region') ?: 'eu-central-1'
}

cloudFormation {
    stackName "$project.name-stack"
    stackParams([
            SubnetID: findProperty('subnetId') ?: '',
            ServiceName: project.name,
            ServiceVersion: project.version,
            DockerHubUsername: dockerHubUsernameProperty
    ])
    templateFile project.file("ecs.yml")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

task writeDockerImageNameToFile {
    doLast {
        new File("$buildDir/dockerImageName.txt").text = imageName
    }
}

build.dependsOn writeDockerImageNameToFile
// or if you have a specific Docker task
docker.dependsOn writeDockerImageNameToFile

tasks.named('docker').configure {
    dependsOn 'printVersion'
    doFirst {
        println "Building and pushing Docker image with name: $imageName"
    }
}


task('doStuff', type: Copy) {
    println 'configuring task'
    doFirst {
        println 'running task'
    }
}