import java.util.regex.Matcher

plugins {
    id 'java'
    id 'maven-publish' // Apply the maven-publish plugin
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' // Update to the latest version
    id 'org.springframework.boot' version '2.5.5' // Use a valid Spring Boot plugin version
    id 'net.researchgate.release' version '3.0.2'
    id 'com.palantir.docker' version '0.34.0'
    id 'com.palantir.docker-run' version '0.34.0'
    id 'jp.classmethod.aws.reboot.cloudformation' version '0.45'
}

version = project.version

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'com.h2database', name: 'h2', version: '2.1.214'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'klesio123'
String imageName = "${dockerHubUsernameProperty}/spring-boot-api-example:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

aws {
    region = findProperty('region') ?: 'eu-central-1'
}

cloudFormation {
    stackName "$project.name-stack"
    stackParams([
            SubnetID: findProperty('subnetId') ?: '',
            ServiceName: project.name,
            ServiceVersion: project.version,
            DockerHubUsername: dockerHubUsernameProperty
    ])
    templateFile project.file("ecs.yml")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

task('doStuff', type: Copy) {
    println 'configuring task'
    doFirst {
        println 'running task'
    }
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    snapshotSuffix = '-SNAPSHOT'
    buildTasks = []
    ignoredSnapshotDependencies = []
    versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]
    pushReleaseVersionBranch = null
    scmAdapters = [
            net.researchgate.release.GitAdapter,
            net.researchgate.release.SvnAdapter,
            net.researchgate.release.HgAdapter,
            net.researchgate.release.BzrAdapter
    ]

    git {
        requireBranch.set('develop')
        pushToRemote.set('origin')
        pushToBranchPrefix.set('')
        commitVersionFileOnly.set(false)
        signTag.set(false)
    }

    svn {
        username.set(null)
        password.set(null)
        pinExternals.set(false)   // allows to pin the externals when tagging, requires subversion client >= 1.9.0
    }
}

publishing {
    repositories {
        maven {
            url = "http://localhost:8081/repository/maven-public/"
            allowInsecureProtocol = true // Allow insecure protocol (HTTP)
            credentials {
                username = project.findProperty("nexusUsername") ?: "admin"
                password = project.findProperty("nexusPassword") ?: "Oiselk@123"
            }
        }
    }
    publications {
        maven(MavenPublication) {
            // Specify the groupId, artifactId, and version for the publication
            groupId = 'com.example' // Replace 'com.example' with your actual group ID
            artifactId = 'your-artifact-id'
            version = '1.0.0'

            // Attach the JAR file to the publication
            from components.java
        }
    }
}

tasks {
    afterReleaseBuild {
        dependsOn publish
    }
}

